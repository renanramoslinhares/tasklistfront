{"remainingRequest":"/var/www/html/tasklist/tasklistfront/node_modules/babel-loader/lib/index.js!/var/www/html/tasklist/tasklistfront/node_modules/eslint-loader/index.js??ref--13-0!/var/www/html/tasklist/tasklistfront/src/services/taskService.js","dependencies":[{"path":"/var/www/html/tasklist/tasklistfront/src/services/taskService.js","mtime":1615665992466},{"path":"/var/www/html/tasklist/tasklistfront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/tasklist/tasklistfront/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/var/www/html/tasklist/tasklistfront/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyI7CnZhciBVUkxfQVBJID0gImh0dHBzOi8vdGFza2xpc3RqYXZhYXBpLmhlcm9rdWFwcC5jb20iOwoKdmFyIHJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KCkgewogIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAiLyI7CiAgdmFyIG1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogIkdFVCI7CiAgdmFyIGJvZHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICB2YXIgaGVhZGVycyA9IHsKICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgiCiAgfTsKICByZXR1cm4gZmV0Y2goVVJMX0FQSSArIHBhdGgsIHsKICAgIG1ldGhvZDogbWV0aG9kLAogICAgaGVhZGVyczogaGVhZGVycywKICAgIGJvZHk6IGJvZHkKICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICB9KTsKfTsKCnZhciBub3JtYWxpemVCb2R5ID0gZnVuY3Rpb24gbm9ybWFsaXplQm9keShvYmplY3RCb2R5KSB7CiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG9iamVjdEJvZHkpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGN1cnJlbnQpIHsKICAgIGFjY3VtdWxhdG9yLnB1c2goY3VycmVudFswXSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudChjdXJyZW50WzFdKSk7CiAgICByZXR1cm4gYWNjdW11bGF0b3I7CiAgfSwgW10pLmpvaW4oIiYiKTsKfTsKCmV4cG9ydCB2YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHRpdGxlKSB7CiAgcmV0dXJuIHJlcXVlc3QoIi90YXNrLyIsICJQT1NUIiwgbm9ybWFsaXplQm9keSh7CiAgICB0aXRsZTogdGl0bGUKICB9KSk7Cn07CmV4cG9ydCB2YXIgcmVhZEFsbCA9IGZ1bmN0aW9uIHJlYWRBbGwoKSB7CiAgcmV0dXJuIHJlcXVlc3QoIi90YXNrcy8iKTsKfTsKZXhwb3J0IHZhciByZWFkQnlJZCA9IGZ1bmN0aW9uIHJlYWRCeUlkKGlkKSB7CiAgcmV0dXJuIHJlcXVlc3QoIi90YXNrLyIuY29uY2F0KGlkKSk7Cn07CmV4cG9ydCB2YXIgdXBkYXRlQnlJZCA9IGZ1bmN0aW9uIHVwZGF0ZUJ5SWQoaWQsIG9iamVjdEJvZHkpIHsKICByZXR1cm4gcmVxdWVzdCgiL3Rhc2svIi5jb25jYXQoaWQpLCAiUFVUIiwgbm9ybWFsaXplQm9keShvYmplY3RCb2R5KSk7Cn07CmV4cG9ydCB2YXIgZGVsZXRlQnlJZCA9IGZ1bmN0aW9uIGRlbGV0ZUJ5SWQoaWQpIHsKICByZXR1cm4gcmVxdWVzdCgiL3Rhc2svIi5jb25jYXQoaWQpLCAiREVMRVRFIik7Cn07"},{"version":3,"sources":["/var/www/html/tasklist/tasklistfront/src/services/taskService.js"],"names":["URL_API","request","path","method","body","headers","fetch","then","response","json","normalizeBody","objectBody","Object","entries","reduce","accumulator","current","push","encodeURIComponent","join","create","title","readAll","readById","id","updateById","deleteById"],"mappings":";;;;AAAA,IAAMA,OAAO,GAAG,uCAAhB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAsC;AAAA,MAArCC,IAAqC,uEAA9B,GAA8B;AAAA,MAAzBC,MAAyB,uEAAhB,KAAgB;AAAA,MAATC,IAAS;AACpD,MAAMC,OAAO,GAAG;AACd,oBAAgB;AADF,GAAhB;AAGA,SAAOC,KAAK,CAACN,OAAO,GAAGE,IAAX,EAAiB;AAC3BC,IAAAA,MAAM,EAANA,MAD2B;AAE3BE,IAAAA,OAAO,EAAPA,OAF2B;AAG3BD,IAAAA,IAAI,EAAJA;AAH2B,GAAjB,CAAL,CAIJG,IAJI,CAIC,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GAJD,CAAP;AAKD,CATD;;AAWA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD;AAAA,SACpBC,MAAM,CAACC,OAAP,CAAeF,UAAf,EACGG,MADH,CACU,UAACC,WAAD,EAAcC,OAAd,EAA0B;AAChCD,IAAAA,WAAW,CAACE,IAAZ,CAAiBD,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb,GAAmBE,kBAAkB,CAACF,OAAO,CAAC,CAAD,CAAR,CAAtD;AACA,WAAOD,WAAP;AACD,GAJH,EAIK,EAJL,EAKGI,IALH,CAKQ,GALR,CADoB;AAAA,CAAtB;;AAQA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,SACpBpB,OAAO,CAAC,QAAD,EAAW,MAAX,EAAmBS,aAAa,CAAC;AAAEW,IAAAA,KAAK,EAALA;AAAF,GAAD,CAAhC,CADa;AAAA,CAAf;AAGP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAMrB,OAAO,CAAC,SAAD,CAAb;AAAA,CAAhB;AAEP,OAAO,IAAMsB,QAAQ,GAAG,SAAXA,QAAW,CAACC,EAAD;AAAA,SAAQvB,OAAO,iBAAUuB,EAAV,EAAf;AAAA,CAAjB;AAEP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACD,EAAD,EAAKb,UAAL;AAAA,SACxBV,OAAO,iBAAUuB,EAAV,GAAgB,KAAhB,EAAuBd,aAAa,CAACC,UAAD,CAApC,CADiB;AAAA,CAAnB;AAGP,OAAO,IAAMe,UAAU,GAAG,SAAbA,UAAa,CAACF,EAAD;AAAA,SAAQvB,OAAO,iBAAUuB,EAAV,GAAgB,QAAhB,CAAf;AAAA,CAAnB","sourcesContent":["const URL_API = \"https://tasklistjavaapi.herokuapp.com\";\n\nconst request = (path = \"/\", method = \"GET\", body) => {\n  const headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n  };\n  return fetch(URL_API + path, {\n    method,\n    headers,\n    body,\n  }).then((response) => response.json());\n};\n\nconst normalizeBody = (objectBody) =>\n  Object.entries(objectBody)\n    .reduce((accumulator, current) => {\n      accumulator.push(current[0] + \"=\" + encodeURIComponent(current[1]));\n      return accumulator;\n    }, [])\n    .join(\"&\");\n\nexport const create = (title) =>\n  request(\"/task/\", \"POST\", normalizeBody({ title }));\n\nexport const readAll = () => request(\"/tasks/\");\n\nexport const readById = (id) => request(`/task/${id}`);\n\nexport const updateById = (id, objectBody) =>\n  request(`/task/${id}`, \"PUT\", normalizeBody(objectBody));\n\nexport const deleteById = (id) => request(`/task/${id}`, \"DELETE\");\n"]}]}